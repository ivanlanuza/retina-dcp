generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  LOST
}

model Accounts {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  status        AccountStatus   @default(ACTIVE)
  isactive      Boolean         @default(true)
  admin         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     Users?          @relation("AccountCreatedBy", fields: [createdById], references: [id])
  createdById   Int?
  updatedBy     Users?          @relation("AccountUpdatedBy", fields: [updatedById], references: [id])
  updatedById   Int?
  users         Users[]
  roles         Roles[]
  locations     Locations[]
  userLocations UserLocations[]
}

model Users {
  id                   Int             @id @default(autoincrement())
  account              Accounts        @relation(fields: [accountId], references: [id])
  accountId            Int
  username             String          @unique
  password             String
  status               UserStatus      @default(ACTIVE)
  role                 Roles           @relation(fields: [roleId], references: [id])
  roleId               Int
  tags                 String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  createdBy            Users?          @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById          Int?
  updatedBy            Users?          @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedById          Int?
  createdAccounts      Accounts[]      @relation("AccountCreatedBy")
  updatedAccounts      Accounts[]      @relation("AccountUpdatedBy")
  createdRoles         Roles[]         @relation("RoleCreatedBy")
  updatedRoles         Roles[]         @relation("RoleUpdatedBy")
  createdLocations     Locations[]     @relation("LocationCreatedBy")
  updatedLocations     Locations[]     @relation("LocationUpdatedBy")
  createdUserLocations UserLocations[] @relation("UserLocationCreatedBy")
  updatedUserLocations UserLocations[] @relation("UserLocationUpdatedBy")
  userLocations        UserLocations[]
  CreatedBy            Users[]         @relation("UserCreatedBy")
  UpdatedBy            Users[]         @relation("UserUpdatedBy")
  forms                Forms[]
  submissions          Submissions[]   @relation("UserSubmissions")
  taggedForms          Forms[]         @relation("FormTaggedUsers")
}

model Roles {
  id          Int      @id @default(autoincrement())
  account     Accounts @relation(fields: [accountId], references: [id])
  accountId   Int
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Users?   @relation("RoleCreatedBy", fields: [createdById], references: [id])
  createdById Int?
  updatedBy   Users?   @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int?
  users       Users[]
}

model Locations {
  id             Int             @id @default(autoincrement())
  account        Accounts        @relation(fields: [accountId], references: [id])
  accountId      Int
  name           String
  geocoordinates String
  tags           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      Users?          @relation("LocationCreatedBy", fields: [createdById], references: [id])
  createdById    Int?
  updatedBy      Users?          @relation("LocationUpdatedBy", fields: [updatedById], references: [id])
  updatedById    Int?
  userLocations  UserLocations[]
  taggedForms    Forms[]         @relation("FormTaggedLocations")
}

model UserLocations {
  id          Int       @id @default(autoincrement())
  account     Accounts  @relation(fields: [accountId], references: [id])
  accountId   Int
  user        Users     @relation(fields: [userId], references: [id])
  userId      Int
  location    Locations @relation(fields: [locationId], references: [id])
  locationId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   Users?    @relation("UserLocationCreatedBy", fields: [createdById], references: [id])
  createdById Int?
  updatedBy   Users?    @relation("UserLocationUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int?
}

model Forms {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  frequency       FrequencyTypes
  userId          Int
  user            Users          @relation(fields: [userId], references: [id])
  questions       Questions[]
  submissions     Submissions[]
  taggedUsers     Users[]        @relation("FormTaggedUsers")
  taggedLocations Locations[]    @relation("FormTaggedLocations")
}

enum FrequencyTypes {
  ONETIME
  DAILY
  WEEKLY
  MONTHLY
  ALWAYSAVAILABLE
}

model Questions {
  id         Int             @id @default(autoincrement())
  text       String
  type       QuestionTypes
  isRequired Boolean         @default(false)
  order      Int
  formId     Int
  form       Forms           @relation(fields: [formId], references: [id])
  options    AnswerOptions[]
  answers    Answers[]
}

enum QuestionTypes {
  TEXT
  INTEGER
  CURRENCY
  PARAGRAPH
  CHECKLIST
  DROPDOWN
  RADIO
  TABLE
}

model AnswerOptions {
  id         Int       @id @default(autoincrement())
  text       String
  order      Int
  questionId Int
  question   Questions @relation(fields: [questionId], references: [id])
}

model Submissions {
  id        Int       @id @default(autoincrement())
  formId    Int
  form      Forms     @relation(fields: [formId], references: [id])
  userId    Int?
  user      Users?    @relation(fields: [userId], references: [id], name: "UserSubmissions")
  answers   Answers[]
  createdAt DateTime  @default(now())
}

model Answers {
  id           Int         @id @default(autoincrement())
  answerValue  Json
  submissionId Int
  submission   Submissions @relation(fields: [submissionId], references: [id])
  questionId   Int
  question     Questions   @relation(fields: [questionId], references: [id])
}
