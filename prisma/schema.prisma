generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  LOST
}

model Accounts {
  id            String          @id @default(cuid())
  name          String          @unique
  status        AccountStatus   @default(ACTIVE)
  isactive      Boolean         @default(true)
  admin         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     Users?          @relation("AccountCreatedBy", fields: [createdById], references: [id])
  createdById   String?
  updatedBy     Users?          @relation("AccountUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?
  users         Users[]
  roles         Role[]
  locations     Location[]
  userLocations UserLocations[]
}

model Users {
  id                   String          @id @default(cuid())
  account              Accounts        @relation(fields: [accountId], references: [id])
  accountId            String
  username             String          @unique
  password             String
  status               UserStatus      @default(ACTIVE)
  role                 Role            @relation(fields: [roleId], references: [id])
  roleId               String
  tags                 String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  createdBy            Users?          @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById          String?
  updatedBy            Users?          @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedById          String?
  createdAccounts      Accounts[]      @relation("AccountCreatedBy")
  updatedAccounts      Accounts[]      @relation("AccountUpdatedBy")
  createdRoles         Role[]          @relation("RoleCreatedBy")
  updatedRoles         Role[]          @relation("RoleUpdatedBy")
  createdLocations     Location[]      @relation("LocationCreatedBy")
  updatedLocations     Location[]      @relation("LocationUpdatedBy")
  createdUserLocations UserLocations[] @relation("UserLocationCreatedBy")
  updatedUserLocations UserLocations[] @relation("UserLocationUpdatedBy")
  userLocations        UserLocations[]
  CreatedBy            Users[]         @relation("UserCreatedBy")
  UpdatedBy            Users[]         @relation("UserUpdatedBy")
  forms                Form[]
  submissions          Submission[]    @relation("UserSubmissions")
  taggedForms          Form[]          @relation("FormTaggedUsers")
}

model Role {
  id          String   @id @default(cuid())
  account     Accounts @relation(fields: [accountId], references: [id])
  accountId   String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Users?   @relation("RoleCreatedBy", fields: [createdById], references: [id])
  createdById String?
  updatedBy   Users?   @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
  users       Users[]
}

model Location {
  id             String          @id @default(cuid())
  account        Accounts        @relation(fields: [accountId], references: [id])
  accountId      String
  name           String
  geocoordinates String
  tags           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      Users?          @relation("LocationCreatedBy", fields: [createdById], references: [id])
  createdById    String?
  updatedBy      Users?          @relation("LocationUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String?
  userLocations  UserLocations[]
  taggedForms    Form[]          @relation("FormTaggedLocations")
}

model UserLocations {
  id          String   @id @default(cuid())
  account     Accounts @relation(fields: [accountId], references: [id])
  accountId   String
  user        Users    @relation(fields: [userId], references: [id])
  userId      String
  location    Location @relation(fields: [locationId], references: [id])
  locationId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Users?   @relation("UserLocationCreatedBy", fields: [createdById], references: [id])
  createdById String?
  updatedBy   Users?   @relation("UserLocationUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
}


model Form {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  frequency   FrequencyType
  userId      String 
  user        Users   @relation(fields: [userId], references: [id])
  questions   Question[]
  submissions Submission[]
  taggedUsers Users[]     @relation("FormTaggedUsers")
  taggedLocations Location[] @relation("FormTaggedLocations")
}

enum FrequencyType {
  ONETIME
  DAILY
  WEEKLY
  MONTHLY
  ALWAYSAVAILABLE
}

model Question {
  id          Int       @id @default(autoincrement())
  text        String
  type        QuestionType
  isRequired  Boolean   @default(false)
  order       Int
  formId      Int
  form        Form      @relation(fields: [formId], references: [id])
  options     AnswerOption[]
  answers     Answer[]
}

enum QuestionType {
  TEXT
  INTEGER
  CURRENCY
  PARAGRAPH
  CHECKLIST
  DROPDOWN
  RADIO
  TABLE
}

model AnswerOption {
  id         Int       @id @default(autoincrement())
  text       String
  order      Int
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id])
}

model Submission {
  id        Int       @id @default(autoincrement())
  formId    Int
  form      Form      @relation(fields: [formId], references: [id])
  userId    String?   
  user      Users?    @relation(fields: [userId], references: [id], name: "UserSubmissions")
  answers   Answer[]
  createdAt DateTime  @default(now())
}

model Answer {
  id            Int       @id @default(autoincrement())
  answerValue   Json
  submissionId  Int
  submission    Submission @relation(fields: [submissionId], references: [id])
  questionId    Int
  question      Question  @relation(fields: [questionId], references: [id])
}