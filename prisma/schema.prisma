generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  LOST
}

model Accounts {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  status               AccountStatus          @default(ACTIVE)
  isactive             Boolean                @default(true)
  admin                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdBy            Users?                 @relation("AccountCreatedBy", fields: [createdById], references: [id])
  createdById          Int?
  updatedBy            Users?                 @relation("AccountUpdatedBy", fields: [updatedById], references: [id])
  updatedById          Int?
  isdeleted            Boolean                @default(false)
  users                Users[]
  roles                Roles[]
  locations            Locations[]
  Agencies             Agencies[]
  Teams                Teams[]
  Customers            Customers[]
  Suppliers            Suppliers[]
  Brands               Brands[]
  Categories           Categories[]
  Subcategories        Subcategories[]
  Classes              Classes[]
  Subclasses           Subclasses[]
  Competitors          Competitors[]
  CompetitorBrands     CompetitorBrands[]
  Products             Products[]
  News                 News[]
  NewsUsers            NewsUsers[]
  Surveys              Surveys[]
  SurveyQuestions      SurveyQuestions[]
  SurveySubmissions    SurveySubmissions[]
  SurveyAnswers        SurveyAnswers[]
  DTR                  DTR[]
  ProductLocations     ProductLocations[]
  InventoryAdjustments InventoryAdjustments[]
  TransactionType      TransactionType[]
}

model Users {
  id                   Int                    @id @default(autoincrement())
  account              Accounts               @relation(fields: [accountId], references: [id])
  accountId            Int
  username             String                 @unique
  password             String
  firstname            String?
  lastname             String?
  email                String?
  mobile               String?
  agencyid             Int?
  agency               Agencies?              @relation(fields: [agencyid], references: [id])
  teamid               Int?
  team                 Teams?                 @relation(fields: [teamid], references: [id])
  managerid            Int?
  manager              Users?                 @relation("UserManager", fields: [managerid], references: [id])
  status               UserStatus             @default(ACTIVE)
  role                 Roles                  @relation(fields: [roleId], references: [id])
  roleId               Int
  tags                 String?
  accesslocation       String?                @db.Text
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdBy            Users?                 @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById          Int?
  updatedBy            Users?                 @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedById          Int?
  isdeleted            Boolean                @default(false)
  createdAccounts      Accounts[]             @relation("AccountCreatedBy")
  updatedAccounts      Accounts[]             @relation("AccountUpdatedBy")
  createdRoles         Roles[]                @relation("RoleCreatedBy")
  updatedRoles         Roles[]                @relation("RoleUpdatedBy")
  createdLocations     Locations[]            @relation("LocationCreatedBy")
  updatedLocations     Locations[]            @relation("LocationUpdatedBy")
  CreatedBy            Users[]                @relation("UserCreatedBy")
  UpdatedBy            Users[]                @relation("UserUpdatedBy")
  forms                Forms[]
  submissions          Submissions[]          @relation("UserSubmissions")
  taggedForms          Forms[]                @relation("FormTaggedUsers")
  Users                Users[]                @relation("UserManager")
  NewsUsers            NewsUsers[]
  Surveys              Surveys[]
  dtrs                 DTR[]
  SurveySubmissions    SurveySubmissions[]
  ProductLocations     ProductLocations[]
  InventoryAdjustments InventoryAdjustments[]
  TransactionType      TransactionType[]      @relation("TrxTypeCreatedBy")
  TransactionType2     TransactionType[]      @relation("TrxTypeUpdatedBy")
}

model Roles {
  id          Int      @id @default(autoincrement())
  account     Accounts @relation(fields: [accountId], references: [id])
  accountId   Int
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Users?   @relation("RoleCreatedBy", fields: [createdById], references: [id])
  createdById Int?
  updatedBy   Users?   @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int?
  isdeleted   Boolean  @default(false)
  users       Users[]
}

model Locations {
  id                   Int                    @id @default(autoincrement())
  account              Accounts               @relation(fields: [accountId], references: [id])
  accountId            Int
  name                 String
  geocoordinates       String?
  tags                 String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdBy            Users?                 @relation("LocationCreatedBy", fields: [createdById], references: [id])
  createdById          Int?
  updatedBy            Users?                 @relation("LocationUpdatedBy", fields: [updatedById], references: [id])
  updatedById          Int?
  customerid           Int?
  customer             Customers?             @relation(fields: [customerid], references: [id])
  isdeleted            Boolean                @default(false)
  taggedForms          Forms[]                @relation("FormTaggedLocations")
  externalcode         String?
  DTR                  DTR[]
  ProductLocations     ProductLocations[]
  InventoryAdjustments InventoryAdjustments[]
}

model Forms {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  frequency       FrequencyTypes
  userId          Int
  user            Users          @relation(fields: [userId], references: [id])
  isdeleted       Boolean        @default(false)
  questions       Questions[]
  submissions     Submissions[]
  taggedUsers     Users[]        @relation("FormTaggedUsers")
  taggedLocations Locations[]    @relation("FormTaggedLocations")
}

enum FrequencyTypes {
  ONETIME
  DAILY
  WEEKLY
  MONTHLY
  ALWAYSAVAILABLE
}

model Questions {
  id         Int             @id @default(autoincrement())
  text       String
  type       QuestionTypes
  isRequired Boolean         @default(false)
  order      Int
  formId     Int
  form       Forms           @relation(fields: [formId], references: [id])
  isdeleted  Boolean         @default(false)
  options    AnswerOptions[]
  answers    Answers[]
}

enum QuestionTypes {
  TEXT
  INTEGER
  CURRENCY
  PARAGRAPH
  CHECKLIST
  DROPDOWN
  RADIO
  TABLE
}

model AnswerOptions {
  id         Int       @id @default(autoincrement())
  text       String
  order      Int
  questionId Int
  question   Questions @relation(fields: [questionId], references: [id])
  isdeleted  Boolean   @default(false)
}

model Submissions {
  id        Int       @id @default(autoincrement())
  formId    Int
  form      Forms     @relation(fields: [formId], references: [id])
  userId    Int?
  user      Users?    @relation(fields: [userId], references: [id], name: "UserSubmissions")
  isdeleted Boolean   @default(false)
  answers   Answers[]
  createdAt DateTime  @default(now())
}

model Answers {
  id           Int         @id @default(autoincrement())
  answerValue  Json
  submissionId Int
  submission   Submissions @relation(fields: [submissionId], references: [id])
  questionId   Int
  question     Questions   @relation(fields: [questionId], references: [id])
  isdeleted    Boolean     @default(false)
}

model Agencies {
  id          Int      @id @default(autoincrement())
  name        String
  accountid   Int
  account     Accounts @relation(fields: [accountid], references: [id])
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isdeleted   Boolean  @default(false)
  Users       Users[]
}

model Teams {
  id          Int      @id @default(autoincrement())
  name        String
  accountid   Int
  account     Accounts @relation(fields: [accountid], references: [id])
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isdeleted   Boolean  @default(false)
  Users       Users[]
}

model Customers {
  id           Int         @id @default(autoincrement())
  name         String
  accountid    Int
  account      Accounts    @relation(fields: [accountid], references: [id])
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isdeleted    Boolean     @default(false)
  externalcode String?
  Locations    Locations[]
}

model Suppliers {
  id          Int        @id @default(autoincrement())
  name        String
  accountid   Int
  account     Accounts   @relation(fields: [accountid], references: [id])
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isdeleted   Boolean    @default(false)
  Products    Products[]
}

model Brands {
  id               Int                @id @default(autoincrement())
  name             String
  accountid        Int
  account          Accounts           @relation(fields: [accountid], references: [id])
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isdeleted        Boolean            @default(false)
  CompetitorBrands CompetitorBrands[]
  Products         Products[]
}

model Categories {
  id            Int             @id @default(autoincrement())
  name          String
  accountid     Int
  account       Accounts        @relation(fields: [accountid], references: [id])
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isdeleted     Boolean         @default(false)
  Subcategories Subcategories[]
  Classes       Classes[]
  Subclasses    Subclasses[]
  Products      Products[]
}

model Subcategories {
  id          Int          @id @default(autoincrement())
  name        String
  accountid   Int
  account     Accounts     @relation(fields: [accountid], references: [id])
  description String?
  categoryid  Int
  category    Categories   @relation(fields: [categoryid], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isdeleted   Boolean      @default(false)
  Classes     Classes[]
  Subclasses  Subclasses[]
  Products    Products[]
}

model Classes {
  id            Int           @id @default(autoincrement())
  name          String
  accountid     Int
  account       Accounts      @relation(fields: [accountid], references: [id])
  categoryid    Int
  category      Categories    @relation(fields: [categoryid], references: [id])
  subcategoryid Int
  subcategory   Subcategories @relation(fields: [subcategoryid], references: [id])
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isdeleted     Boolean       @default(false)
  Subclasses    Subclasses[]
  Products      Products[]
}

model Subclasses {
  id            Int           @id @default(autoincrement())
  name          String
  accountid     Int
  account       Accounts      @relation(fields: [accountid], references: [id])
  categoryid    Int
  category      Categories    @relation(fields: [categoryid], references: [id])
  subcategoryid Int
  subcategory   Subcategories @relation(fields: [subcategoryid], references: [id])
  classid       Int
  class         Classes       @relation(fields: [classid], references: [id])
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isdeleted     Boolean       @default(false)
  Products      Products[]
}

model Competitors {
  id               Int                @id @default(autoincrement())
  name             String
  accountid        Int
  account          Accounts           @relation(fields: [accountid], references: [id])
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isdeleted        Boolean            @default(false)
  CompetitorBrands CompetitorBrands[]
}

model CompetitorBrands {
  id              Int         @id @default(autoincrement())
  name            String
  accountid       Int
  account         Accounts    @relation(fields: [accountid], references: [id])
  competitorid    Int
  competitor      Competitors @relation(fields: [competitorid], references: [id])
  competitorlevel Int
  linkedbrandid   Int?
  linkedbrand     Brands?     @relation(fields: [linkedbrandid], references: [id])
  description     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isdeleted       Boolean     @default(false)
}

model Products {
  id                   Int                    @id @default(autoincrement())
  name                 String
  accountid            Int
  account              Accounts               @relation(fields: [accountid], references: [id])
  description          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  categoryid           Int?
  category             Categories?            @relation(fields: [categoryid], references: [id])
  subcategoryid        Int?
  subcategory          Subcategories?         @relation(fields: [subcategoryid], references: [id])
  classid              Int?
  class                Classes?               @relation(fields: [classid], references: [id])
  subclassid           Int?
  subclass             Subclasses?            @relation(fields: [subclassid], references: [id])
  brandid              Int?
  brand                Brands?                @relation(fields: [brandid], references: [id])
  supplierid           Int?
  supplier             Suppliers?             @relation(fields: [supplierid], references: [id])
  barcode              String?
  externalcode         String?
  photo                String?
  tags                 String?
  isdeleted            Boolean                @default(false)
  ProductLocations     ProductLocations[]
  InventoryAdjustments InventoryAdjustments[]
}

model News {
  id          Int            @id @default(autoincrement())
  accountid   Int
  account     Accounts       @relation(fields: [accountid], references: [id])
  title       String
  subtitle    String?
  newsinfo    String?        @db.Text
  visibility  NewsVisibility @default(ALL)
  ispublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isdeleted   Boolean        @default(false)
  NewsUsers   NewsUsers[]
}

enum NewsVisibility {
  ALL
  LIMITED
}

model NewsUsers {
  id        Int        @id @default(autoincrement())
  accountid Int
  account   Accounts   @relation(fields: [accountid], references: [id])
  newsid    Int
  News      News       @relation(fields: [newsid], references: [id])
  userid    Int
  user      Users      @relation(fields: [userid], references: [id])
  status    NewsStatus
  isdeleted Boolean    @default(false)
}

enum NewsStatus {
  SENT
  OPENED
  READ
}

model Surveys {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String?
  allowMultiple     Boolean             @default(false)
  openFrom          DateTime?
  openUntil         DateTime?
  status            String
  scopeType         String
  userId            Int
  user              Users               @relation(fields: [userId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isdeleted         Boolean             @default(false)
  accountId         Int
  account           Accounts            @relation(fields: [accountId], references: [id])
  SurveyQuestions   SurveyQuestions[]
  SurveySubmissions SurveySubmissions[]
  SurveyAnswers     SurveyAnswers[]
}

model SurveyQuestions {
  id            Int             @id @default(autoincrement())
  surveyId      Int
  survey        Surveys         @relation(fields: [surveyId], references: [id])
  question      String?
  type          String?
  options       String?         @db.LongText
  externalid    Int?
  sortOrder     Int?
  isMandatory   Boolean         @default(false)
  geofence      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isdeleted     Boolean         @default(false)
  accountId     Int
  account       Accounts        @relation(fields: [accountId], references: [id])
  SurveyAnswers SurveyAnswers[]
}

model DTR {
  id         Int        @id @default(autoincrement())
  userId     Int
  user       Users      @relation(fields: [userId], references: [id])
  date       DateTime
  checkIn    DateTime?
  checkOut   DateTime?
  locationid Int?
  locations  Locations? @relation(fields: [locationid], references: [id])
  accountId  Int?
  account    Accounts?  @relation(fields: [accountId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  isdeleted  Boolean    @default(false)
}

model SurveySubmissions {
  id            Int             @id @default(autoincrement())
  surveyId      Int
  survey        Surveys         @relation(fields: [surveyId], references: [id])
  userId        Int?
  user          Users?          @relation(fields: [userId], references: [id])
  createdAt     DateTime        @default(now())
  isdeleted     Boolean         @default(false)
  accountId     Int?
  account       Accounts?       @relation(fields: [accountId], references: [id])
  SurveyAnswers SurveyAnswers[]
}

model SurveyAnswers {
  id           Int               @id @default(autoincrement())
  answerValue  Json
  submissionId Int
  submission   SurveySubmissions @relation(fields: [submissionId], references: [id])
  surveyId     Int?
  survey       Surveys?          @relation(fields: [surveyId], references: [id])
  questionId   Int
  question     SurveyQuestions   @relation(fields: [questionId], references: [id])
  accountId    Int?
  account      Accounts?         @relation(fields: [accountId], references: [id])
  isdeleted    Boolean           @default(false)
}

model ProductLocations {
  id             Int       @id @default(autoincrement())
  productid      Int
  product        Products  @relation(fields: [productid], references: [id])
  locationid     Int
  location       Locations @relation(fields: [locationid], references: [id])
  isactive       Boolean   @default(true)
  inventorycount Int       @default(0)
  transactionTypeId Int?
  transactionType   TransactionType? @relation(fields: [transactionTypeId], references: [id])
  isdeleted      Boolean   @default(false)
  userid         Int?
  user           Users?    @relation(fields: [userid], references: [id])
  accountid      Int?
  account        Accounts? @relation(fields: [accountid], references: [id])
  createdAt      DateTime  @default(now())

  @@unique([accountid, productid, locationid])
}

model InventoryAdjustments {
  id                Int       @id @default(autoincrement())
  productid         Int
  product           Products  @relation(fields: [productid], references: [id])
  locationid        Int
  location          Locations @relation(fields: [locationid], references: [id])
  oldinventorycount Int
  adjustmentqty     Int
  newinventorycount Int
  transactionTypeId Int? 
  transactionType   TransactionType? @relation(fields: [transactionTypeId], references: [id])
  isdeleted         Boolean   @default(false)
  userid            Int?
  user              Users?    @relation(fields: [userid], references: [id])
  accountid         Int?
  account           Accounts? @relation(fields: [accountid], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([accountid, productid, locationid])
}

model TransactionType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  account     Accounts @relation(fields: [accountId], references: [id])
  accountId   Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  createdBy   Users?   @relation("TrxTypeCreatedBy", fields: [createdById], references: [id])
  createdById Int?
  updatedAt   DateTime @updatedAt
  updatedBy   Users?   @relation("TrxTypeUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int?
  inventoryAdjustments InventoryAdjustments[]
  productLocations     ProductLocations[]
}
